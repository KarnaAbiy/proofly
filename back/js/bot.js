const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const express = require('express');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const axios = require('axios');

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const app = express();
app.use(cors());
app.use(express.json());

const UPLOAD_DIR = path.join(__dirname, 'uploads');
if (!fs.existsSync(UPLOAD_DIR)) {
  fs.mkdirSync(UPLOAD_DIR);
}

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ URL: http://{host}/uploads/filename
app.use('/uploads', express.static(UPLOAD_DIR));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, UPLOAD_DIR);
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    const filename = `${Date.now()}_${Math.random().toString(36).slice(2)}${ext}`;
    cb(null, filename);
  }
});

const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const allowed = ['.jpg', '.jpeg', '.png', '.gif', '.mp4', '.mov', '.avi', '.mkv'];
    const ext = path.extname(file.originalname).toLowerCase();
    if (allowed.includes(ext)) cb(null, true);
    else cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞'), false);
  }
});

const COMPLAINTS_FILE = 'complaints.json';
const SUBSCRIBERS_FILE = 'subscribers.json';

function getComplaints() {
  try {
    return JSON.parse(fs.readFileSync(COMPLAINTS_FILE, 'utf8'));
  } catch {
    return [];
  }
}

function addComplaint(complaint) {
  const complaints = getComplaints();
  complaints.push(complaint);
  fs.writeFileSync(COMPLAINTS_FILE, JSON.stringify(complaints, null, 2));
}

function getSubscribers() {
  try {
    return JSON.parse(fs.readFileSync(SUBSCRIBERS_FILE, 'utf8'));
  } catch {
    return [];
  }
}

function addSubscriber(chatId) {
  const subscribers = getSubscribers();
  if (!subscribers.includes(chatId)) {
    subscribers.push(chatId);
    fs.writeFileSync(SUBSCRIBERS_FILE, JSON.stringify(subscribers, null, 2));
    console.log(`‚ûï –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: ${chatId}`);
  }
}

const options = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '–£–í–î', callback_data: '–£–í–î' }],
      [{ text: '–ú–í–î', callback_data: '–ú–í–î' }],
      [{ text: '–ì–ö–ù–ë', callback_data: '–ì–ö–ù–ë' }],
    ]
  }
};

bot.onText(/\/start/, (msg) => {
  addSubscriber(msg.chat.id);
  bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–¥–æ–º—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∞–ª–æ–±:', options);
});

bot.on('callback_query', async (query) => {
  const category = query.data;
  const complaints = getComplaints();
  const filtered = complaints.filter(c => c.category === category);

  if (filtered.length === 0) {
    bot.sendMessage(query.message.chat.id, `–ñ–∞–ª–æ–± –Ω–∞ ${category} –ø–æ–∫–∞ –Ω–µ—Ç.`);
  } else {
    for (const c of filtered) {
      const caption = `${filtered.indexOf(c) + 1}. ${c.description}\n–ú–µ—Å—Ç–æ: ${c.location}`;
      if (c.fileUrl) {
        try {
          const ext = path.extname(c.fileUrl).toLowerCase();

          if (['.jpg', '.jpeg', '.png', '.gif'].includes(ext)) {
            await bot.sendPhoto(query.message.chat.id, c.fileUrl, { caption });
          } else if (['.mp4', '.mov', '.avi', '.mkv'].includes(ext)) {
            await bot.sendVideo(query.message.chat.id, c.fileUrl, { caption });
          } else {
            await bot.sendDocument(query.message.chat.id, c.fileUrl, {}, { caption });
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:', err.message);
          bot.sendMessage(query.message.chat.id, `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: ${caption}`);
        }
      } else {
        bot.sendMessage(query.message.chat.id, caption);
      }
    }
  }

  bot.answerCallbackQuery(query.id);
});

// POST /complaints - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∂–∞–ª–æ–±—É —Å —Ñ–∞–π–ª–æ–º
app.post('/complaints', upload.array('mediaUpload', 6), async (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', req.files);

  const { category, description, location } = req.body;
  if (!category || !description || !location) {
    return res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
  }

  // req.files ‚Äî –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤
  const files = req.files || [];

  // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const host = process.env.HOST || `http://localhost:3000`;
  const fileUrls = files.map(file => `${host}/uploads/${file.filename}`);

  const newComplaint = { category, description, location, fileUrls };
  addComplaint(newComplaint);

  console.log('üÜï –ñ–∞–ª–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', newComplaint);

  const text = `üì¢ –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!\n\nüè¢ –ê–¥—Ä–µ—Å–æ–≤–∞–Ω–æ: ${category}\n‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\nüìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${location}`;

  const subscribers = getSubscribers();

  for (const chatId of subscribers) {
    try {
      if (fileUrls.length) {
        for (const fileUrl of fileUrls) {
          const ext = path.extname(fileUrl).toLowerCase();

          if (['.jpg', '.jpeg', '.png', '.gif'].includes(ext)) {
            await bot.sendPhoto(chatId, fileUrl, { caption: text });
          } else if (['.mp4', '.mov', '.avi', '.mkv'].includes(ext)) {
            await bot.sendVideo(chatId, fileUrl, { caption: text });
          } else {
            await bot.sendDocument(chatId, fileUrl, {}, { caption: text });
          }
        }
      } else {
        await bot.sendMessage(chatId, text);
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è chatId ${chatId}:`, err.message);
    }
  }

  res.json({ status: 'success', message: '–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞' });
});

const HOST = '0.0.0.0';
const PORT = process.env.PORT || 3000;

app.listen(PORT, HOST, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`);
});


if (!fs.existsSync(UPLOAD_DIR)) fs.mkdirSync(UPLOAD_DIR);

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.use(cors());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞
app.post('/upload-multiple', upload.array('mediaUpload', 6), (req, res) => {
  console.log(req.files); // –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤
  res.json({ status: 'success', files: req.files });
});

// // –î–ª—è /complaints (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
// app.use(express.json());
// app.post('/complaints', (req, res) => {
//   const { category, description, location } = req.body;
//   console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∂–∞–ª–æ–±–∞:', { category, description, location });
//   res.json({ status: 'success' });
// });

