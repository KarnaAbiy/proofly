require('dotenv').config();
const express = require('express');
const axios = require('axios');
const fileUpload = require('express-fileupload');
const cors = require('cors');
const FormData = require('form-data');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '–í–ê–®_–¢–û–ö–ï–ù';
const TELEGRAM_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;
const MAX_FILE_SIZE = 50 * 1024 * 1024; // 50MB
const UPLOAD_DIR = path.join(__dirname, 'uploads');
const USERS_DB_PATH = path.join(__dirname, 'users.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (!fs.existsSync(UPLOAD_DIR)) fs.mkdirSync(UPLOAD_DIR);
if (!fs.existsSync(USERS_DB_PATH)) fs.writeFileSync(USERS_DB_PATH, '[]');

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(fileUpload({
  limits: { fileSize: MAX_FILE_SIZE },
  abortOnLimit: true
}));

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const addUser = (chatId) => {
  const users = getUsers();
  if (!users.includes(chatId)) {
    users.push(chatId);
    fs.writeFileSync(USERS_DB_PATH, JSON.stringify(users));
  }
};

const getUsers = () => JSON.parse(fs.readFileSync(USERS_DB_PATH));

// Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.post('/webhook', (req, res) => {
  const { message } = req.body;
  
  if (message?.text === '/start') {
    const chatId = message.chat.id;
    addUser(chatId);
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}`);
    
    axios.post(`${TELEGRAM_API_URL}/sendMessage`, {
      chat_id: chatId,
      text: '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!'
    }).catch(console.error);
  }
  
  res.status(200).end();
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã
app.post('/send-complaint', async (req, res) => {
  try {
    const { description, location, department } = req.body;
    const files = req.files?.file ? [req.files.file] : [];
    const users = getUsers();

    if (!description) return res.status(400).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ' });

    const messageText = `
<b>üì¢ –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!</b>

<b>üìÅ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> ${department || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}
<b>üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>üìé –§–∞–π–ª–æ–≤:</b> ${files.length}
    `;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await Promise.all(users.map(chatId => 
      axios.post(`${TELEGRAM_API_URL}/sendMessage`, {
        chat_id: chatId,
        text: messageText,
        parse_mode: 'HTML'
      }).catch(e => console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${chatId}:`, e.message))
    );

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (files.length > 0 && users.length > 0) {
      const file = files[0];
      const filePath = path.join(UPLOAD_DIR, file.name);
      await file.mv(filePath);
      
      const formData = new FormData();
      formData.append('chat_id', users[0]);
      formData.append('document', fs.createReadStream(filePath));
      formData.append('caption', messageText);
      
      await axios.post(`${TELEGRAM_API_URL}/sendDocument`, formData, {
        headers: formData.getHeaders()
      });
      
      fs.unlinkSync(filePath);
    }

    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

app.get('/set-webhook', async (req, res) => {
    try {
      const WEBHOOK_URL = req.query.url || 'http://localhost:3000/set-webhook'; // URL –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
      
      const response = await axios.post(`${TELEGRAM_API_URL}/setWebhook`, {
        url: WEBHOOK_URL,
        max_connections: 40,
        allowed_updates: ['message', 'callback_query']
      });
  
      res.json(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.response?.data || error.message);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook',
        details: error.response?.data || error.message 
      });
    }
  });